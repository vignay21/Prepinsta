# -*- coding: utf-8 -*-
"""SQL_Murder_Mystery.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ue8EgY7sup8rOvFziwth5qji6jnj7yf8

#**Week-5 Assignment**
##**SQL Murder Mystery**
### *By Arijit Dhali [Linkedin](https://www.linkedin.com/in/arijit-dhali-b255b0138/)*

---

There's been a `Murder` in `SQL City`! The `SQL Murder Mystery` is designed to be both a self-directed lesson to learn SQL concepts and commands and a fun game for experienced SQL users to solve an intriguing crime.<br>

A crime has taken place and the detective needs our help. The detective gave us the crime scene report, but we somehow lost it. We vaguely remember that the crime was a murder that occurred sometime on `Jan.15, 2018`, and that it took place in `SQL City`.

---

## **Importing Libraries & DataBase**

First we will be importing multiple libraries:
* `import pandas as pd`: Imports the pandas library and allows it to be used with the alias `pd`.
* `import sqlite3 as sql`: Imports the sqlite3 library and allows it to be used with the alias `sql`.
* `import requests`: Imports the requests library, which is used for making HTTP requests.
"""

import pandas as pd
import sqlite3 as sql
import requests
pd.set_option('display.max_colwidth', None)

"""In order to access the `sql-murder-mystery.db` , I have uploaded it to Github repository.
* [Raw File](https://raw.githubusercontent.com/ArijitDhali/PrepInsta-DA-Week-5/main/sql-murder-mystery.db): Sets the URL where the `sql-murder-mystery.db` SQL database file is hosted on GitHub.
"""

url = 'https://raw.githubusercontent.com/ArijitDhali/PrepInsta-DA-Week-5/main/sql-murder-mystery.db'

"""**Downloading the File**
- `r = requests.get(url, allow_redirects=True)`: Fetches the content from the specified URL (`url`) using the `requests.get()` method. The `allow_redirects=True` parameter allows following redirections, if any.
- `open('sql-murder-mystery.db', 'wb').write(r.content)`: Writes the content (`r.content`) fetched from the URL into a file named `sql-murder-mystery.db` in binary write mode. This effectively downloads the database file from GitHub and saves it locally in the current working directory of the Python script.

**Connecting to the Database**
- `con = sql.connect('sql-murder-mystery.db')`: Establishes a connection to the SQLite database file (`sql-murder-mystery.db`) using the `sql.connect()` method from the `sqlite3` library. Assumes that the file has been successfully downloaded and resides in the same directory where this Python script is executed. The `con` variable holds the connection object to interact with the SQLite database.

"""

r = requests.get(url, allow_redirects=True)
open('sql-murder-mystery.db', 'wb').write(r.content)
con = sql.connect('sql-murder-mystery.db')                # connect to the downloaded file

"""In order to check the contents of the database we will use the particular command."""

data = '''
SELECT name
FROM sqlite_master
WHERE type='table';
'''
pd.read_sql_query(data, con)

"""##**Checking & Viewing Database**

Before we process or manipulate with the tables in the database, we need to get familiarized with the datasets present in the database. <br> View their `Table` names and `Column` names.

### **Table 1:** crime_scene_report

Viewing the `crime_scene_report` table.
<br>Columns:
* `date`
* `type`
* `description`
* `city`
"""

# Query to view top 5 rows from the data
csr = '''
SELECT *
FROM crime_scene_report
LIMIT 5
'''
pd.read_sql_query(csr, con)

"""### **Table 2:** drivers_license

Viewing the `drivers_license` table.
<br>Columns:
* `id`
* `age`
* `height`
* `eye_color`
* `hair_color`
* `gender`
* `plate_number`
* `car_make`
* `car_model`
"""

# Query to view top 5 rows from the data
dli = '''
SELECT *
FROM drivers_license
LIMIT 5
'''
pd.read_sql_query(dli, con)

"""### **Table 3:** person

Viewing the `person` table.
<br>Columns:
* `id`
* `name`
* `license_id`
* `address_number`
* `address_street_name`
* `ssn`
"""

# Query to view top 5 rows from the data
per = '''
SELECT *
FROM person
LIMIT 5
'''
pd.read_sql_query(per, con)

"""### **Table 4:** facebook_event_checkin

Viewing the `facebook_event_checkin` table.
<br>Columns:
* `person_id`
* `event_id`
* `event_name`
* `date`
"""

# Query to view top 5 rows from the data
fech = '''
SELECT *
FROM facebook_event_checkin
LIMIT 5
'''
pd.read_sql_query(fech, con)

"""### **Table 5:** interview

Viewing the `interview` table.
<br>Columns:
* `person_id`
* `transcript`
"""

# Query to view top 5 rows from the data
inte = '''
SELECT *
FROM interview
LIMIT 5
'''
pd.read_sql_query(inte, con)

"""### **Table 6:** get_fit_now_member

Viewing the `get_fit_now_member` table.
<br>Columns:
* `id`
* `person_id`
* `name`
* `membership_start_date`
* `membership_status`
"""

# Query to view top 5 rows from the data
gfnm = '''
SELECT *
FROM get_fit_now_member
LIMIT 5
'''
pd.read_sql_query(gfnm, con)

"""### **Table 7:** get_fit_now_check_in

Viewing the `get_fit_now_check_in` table.
<br>Columns:
* `membership_id`
* `check_in_date`
* `chech_in_time`
* `chech_out_time`
"""

# Query to view top 5 rows from the data
gfnci = '''
SELECT *
FROM get_fit_now_check_in
LIMIT 5
'''
pd.read_sql_query(gfnci, con)

"""### **Table 8:** income

Viewing the `income` table.
<br>Columns:
* `ssn`
* `annual_income`
"""

# Query to view top 5 rows from the data
inc = '''
SELECT *
FROM income
LIMIT 5
'''
pd.read_sql_query(inc, con)

"""### **Table 9:** solution

Viewing the `solution` table.
<br>Columns:
* `user`
* `value`
"""

# Query to view top 5 rows from the data
sol = '''
SELECT *
FROM solution
LIMIT 5
'''
pd.read_sql_query(sol, con)

"""## **Clue To The Mystery**
Till now we can only remember the date and place of murder.
*  `Date` : 15 January, 2018
*  `Place` : SQL City
"""

# Viewing the Murder happened in SQL City on 15 January 2018
crime_scene = '''
SELECT *
FROM crime_scene_report
WHERE city = "SQL City"
AND date = 20180115
AND type = 'murder'
'''
pd.read_sql_query(crime_scene, con)

"""## **Solving Murder Mystery**

Till now we can only remember the date and place of murder.
*  `Date` : 15 January, 2018
*  `Place` : SQL City
"""

# Viewing the crime report evidance

query_1 = '''
SELECT *
FROM crime_scene_report
WHERE type = 'murder'
AND city = 'SQL City'
AND date = 20180115
;
'''
pd.read_sql_query(query_1, con)

"""We will first get familiarize with the dataset of the `person` table."""

# Check out the table

query_2 = '''
SELECT *
FROM person
LIMIT 5
;
'''
pd.read_sql_query(query_2, con)

"""In order to find the first witness, we will search database with the matching parameters.
<Br>First witness lives on `LAST house of Northwestern Dr`.
<br>To find the person we will perform the query with following steps:
1. Select the `person` table
2. Find `address_street_name` - `Northwestern Dr`
3. Find the first name in `Descending` order
"""

# Security footage shows that there were 2 witnesses.
# The first witness : Place - Last house on "Northwestern Dr".

# Finding the first witness, we got a clue that they live in LAST house of Northwestern Dr

query_3 = '''
SELECT *
FROM person
WHERE address_street_name = 'Northwestern Dr'
ORDER BY address_number DESC
LIMIT 1
;
'''
pd.read_sql_query(query_3, con)

"""In order to find the second witness, we will search database with the matching parameters.
<Br>First witness lives on `somewhere in Franklin Ave` and her name is `Annabel`.
<br>To find the person we will perform the query with following steps:
1. Select the `person` table
2. Find `address_street_name` - `Franklin Ave`
3. Find the name like `Annabel`
"""

# Security footage shows that there were 2 witnesses.
# The second witness: Name - Annabel
#                     Place - Somewhere on "Franklin Ave".

# Finding the second witness, we got a clue that they live in Franklin Ave and her name is Annabel

query_4 = '''
SELECT *
FROM person
WHERE address_street_name = 'Franklin Ave'
AND name LIKE '%Annabel%'
;
'''
pd.read_sql_query(query_4, con)

"""After retrieving their `id`, hear about their `interview` and note for clues.
<br> We will note the transcript of witnesses of id `14887` and `16371`.
"""

# Now listening to the interview of two persons with ID 14887,16371

query_5 = '''
SELECT *
FROM interview
WHERE person_id IN (14887,16371)
;
'''
pd.read_sql_query(query_5, con)

"""According to first witness, the culprit has following characteristics:
* `Gold` Member of `Get Fit Now Gym`
* Bag with membership number `starting with 48Z`
* Has car `number plate including H42W`
* Is a `male`

To find the person we will perform the query with following steps:
1. Select the `get_fit_now_member` table
2. Find `membership_status` - `Gold`
3. Find the `id` like `48Z`

"""

# ID 14887 Keynotes : Gold Member of GET FIT NOW GYM.
#                     Membership Number Starting with 48Z
#                     Has car with number plate including H42W
# ID 16371 Keynotes : Gym Checkin on 9 Jan 2018

# Validating data with the notes of witness 1 with GYM Details

query_6 = '''
SELECT *
FROM get_fit_now_member
WHERE membership_status = 'gold'
AND id LIKE '48Z%'
;
'''
pd.read_sql_query(query_6, con)

"""4. Select `drivers_license` table.
5. Find plate_number like `H42W`
6. The culprit should be `male`
"""

# Validating data with the notes of witness 1 with CAR Details

query_7 = '''
SELECT *
FROM drivers_license
WHERE plate_number LIKE '%H42W%'
AND gender = 'male'
;
'''
pd.read_sql_query(query_7, con)

"""* Inner joining `get_fit_now_member` with `drivers_license` table.
* Search the `culprit over same parameters` with witness 1's note.

"""

# Validating data with the notes of witness 1 with CAR and GYM Details

query_8 = '''
SELECT *
FROM person as p
INNER JOIN drivers_license as dl on p.license_id = dl.id
WHERE plate_number LIKE '%H42W%'
AND gender = 'male'
;
'''
pd.read_sql_query(query_8, con)

"""According to second witness, the culprit has following characteristics:
* Member of `Get Fit Now Gym`
* He checked in Gym on `9 Jan 2018`

<br>To find the person we will perform the query with following steps:
1. Select the `get_fit_now_check_in` table
2. Find date - `20180109`
"""

# Validating data with the notes of witness 2 with GYM CHECKIN Details

query_9 = '''
SELECT *
FROM get_fit_now_check_in
WHERE check_in_date = 20180109
;
'''
pd.read_sql_query(query_9, con)

"""Looking out for personal details using the `Inner Join` of `person` to `drivers_license`."""

# Innerjoinig two tables

query_10 = '''
SELECT p.*
FROM drivers_license as dl
INNER JOIN person as p on dl.id = p.license_id
WHERE plate_number LIKE '%H42W%'
AND gender = 'male'
;
'''
pd.read_sql_query(query_10, con)

"""Finding out the final culprit after validating the notes given by two witnesses.
<br> Using the `Inner Join`, we find tha actual culprit of the murder.
"""

# ID 14887 Keynotes : Gold Member of GET FIT NOW GYM.
#                     Membership Number Starting with 48Z
#                     Has car with number plate including H42W
# ID 16371 Keynotes : Gym Checkin on 9 Jan 2018

# Validating data with the notes of 2 witnesses : Looking after the common factor of GYM, Car Details and GYM Checking

query_11 = '''
SELECT p.*,gfn.membership_start_date,gfn.membership_status
FROM person as p
INNER JOIN drivers_license as dl on dl.id = p.license_id
INNER JOIN get_fit_now_member as gfn on p.id = gfn.person_id
INNER JOIN get_fit_now_check_in as gfc on gfc.membership_id = gfn.id
WHERE plate_number LIKE '%H42W%'
AND gender = 'male'
AND membership_status = 'gold'
AND gfn.id LIKE '48Z%'
AND check_in_date = 20180109;
'''
pd.read_sql_query(query_11, con)

"""This following query is used to check whether the solution is correct or not.<br>
However, the only drawback is it can run once only, after first execution.
"""

check_1 = '''
INSERT INTO solution VALUES (1, 'Jeremy Bowers');
'''
pd.read_sql_query(check_1, con)

check_1a = '''
SELECT value FROM solution;
'''
pd.read_sql_query(check_1a, con)

"""**JEREMY BOWERS is the murderer.**

Congrats, you found the murderer! But wait, there's more... If you think you're up for a challenge, try querying the interview transcript of the murderer to find the real villain behind this crime. If you feel especially confident in your SQL skills, try to complete this final step with no more than 2 queries. Use this same INSERT statement with your new suspect to check your answer.

## **Finding the Master-Mind**

To find the mastermind behind all these mess, wee need to interview `JEREMY BOWERS` <br>
We will check for his `transcripts` in `interview` table
"""

# Interviewing the culprit of the murder

mind_0='''
SELECT *
FROM interview
WHERE person_id = 67318
;
'''
pd.read_sql_query(mind_0, con)

"""As per `JEREMY BOWERS`' interview, he concluded the characteristics of the mastermind.<br>
The characteristic:
* `Gender` - Female
* `Height` - Between 65" and 67"
* `Hair` - Red
* `Car` - Tesla Model S
* `Concert` - SQL Symphony Concert [3 Times in December]

To find the person we will perform the query with following steps:
1. Select the table `drivers_license`
2. Search for `hair_color` - `red`
3. Search for `car_make` - `Tesla` and `car_model` - `Model S`
4. Ranging the `age` between `65" and 67"`
"""

# Keynotes from the interview : Gender - Female
#                               Height - Between 65" and 67"
#                               Hair - Red
#                               Car - Tesla Model S
#                               Concert - SQL Symphony Concert x3 in December

# Validating the data using details such as CAR Details, Height and Hair Color

mind_1='''
SELECT *
FROM drivers_license
WHERE car_make = 'Tesla'
AND car_model = 'Model S'
AND hair_color = 'red'
AND height BETWEEN 65 AND 67
;
'''
pd.read_sql_query(mind_1, con)

"""5. Select `facebook_event_checkin`
6. Search for `event_name` - `SQL Symphony Concert`
7. Ranging the `date` between `20171201 and 20171231`
"""

# Validating the data using CONCERT CHECKIN

mind_2='''
SELECT *
FROM facebook_event_checkin
WHERE event_name = 'SQL Symphony Concert'
AND date BETWEEN 20171201 AND 20171231
;
'''
pd.read_sql_query(mind_2, con)

"""We will now Inner Join the `person`, `drivers_license`, `facebook_event_checkin` and `income` tables on common parameters to find mastermind.<br>
Also check if the person has a good `annual_income`.
"""

# Keynotes from the culprit interview : Gender - Female
#                               Height - Between 65" and 67"
#                               Hair - Red
#                               Car - Tesla Model S
#                               Concert - SQL Symphony Concert x3 in December

# Validating the data using CONCERT CHECKIN, CAR DETAILS and PERSONAL CHARACTERISTICS

mind_3='''
SELECT p.*, dl.car_make, dl.car_model, dl.hair_color, dl.height, inc.annual_income
FROM person as p
INNER JOIN income as inc on inc.ssn = p.ssn
INNER JOIN drivers_license as dl on dl.id = p.license_id
INNER JOIN facebook_event_checkin as fec on p.id = fec.person_id
WHERE car_make = 'Tesla'
AND car_model = 'Model S'
AND hair_color = 'red'
AND height BETWEEN 65 AND 67
AND event_name = 'SQL Symphony Concert'
AND date BETWEEN 20171201 AND 20171231
;
'''
pd.read_sql_query(mind_3, con)

"""Congrats, you found the brains behind the murder! Everyone in SQL City hails you as the greatest SQL detective of all time. Time to break out the champagne!

This following query is used to check whether the solution is correct or not.<br>
However, the only drawback is it can run once only, after first execution.
"""

check_2 = '''
INSERT INTO solution VALUES (1, 'Miranda Priestly');
'''
pd.read_sql_query(check_2, con)

check_2a = '''
SELECT value FROM solution;
'''
pd.read_sql_query(check_2a, con)

"""**MIRANDA PRIESTLY** is the mastermind behind the murder. Her `income` justifies that she has enough wealth to hire **JEREMY BOWERS** and visited the `SQL Symphony Concert` 3 times in `December`."""